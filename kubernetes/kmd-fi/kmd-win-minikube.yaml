apiVersion: v1
kind: Namespace
metadata:
  name: algo-kmd-mainnet
---
apiVersion: v1
kind: Service
metadata:
  name: algo-kmd-service-data
  namespace: algo-kmd-mainnet
spec:
  type: ClusterIP
  selector:
    app: algo-kmd-mainnet
  ports:
    - name: algoclient
      protocol: TCP
      appProtocol: http
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kmd-node-2
  namespace: algo-kmd-mainnet
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: algo-kmd-mainnet
  template:
    metadata:
      labels:
        app: algo-kmd-mainnet
    spec:
      nodeName: sch-h-02
      containers:
        - name: algo-kmd-mainnet
          image: docker.io/scholtz2/algorand-kmd-mainnet:3.8.1-stable
          imagePullPolicy: Always
#           resources:
#            requests:
#              memory: "10000Mi"
#              cpu: "16000m"
#            limits:
#              memory: "20000Mi"
#              cpu: "32000m"
#          command: ["/bin/sh", "-ec", "while :; do date; sleep 60 ; done"]
          command:
            - /bin/bash
            - /app/run-kmd.sh
          ports:
            - containerPort: 8080
              protocol: TCP
#          startupProbe:
#            exec:
#              command:
#              - /bin/bash
#              - /app/health.sh
#            initialDelaySeconds: 10
#            periodSeconds: 10   
#            failureThreshold: 1000
#          readinessProbe:
#            exec:
#              command:
#              - /bin/bash
#              - /app/health.sh
#            initialDelaySeconds: 10
#            timeoutSeconds: 10   
#            failureThreshold: 100
#          livenessProbe:
#            exec:
#              command:
#              - /bin/bash
#              - /app/health.sh
#            initialDelaySeconds: 10
#            timeoutSeconds: 10        
#            failureThreshold: 6
#            terminationGracePeriodSeconds: 60
#          securityContext:
#            runAsUser: 1000
#            runAsGroup: 1000
          volumeMounts:
            - name: algo-mainnet-kmd-pvc
              mountPath: /app/data
      volumes:
        - name: algo-mainnet-kmd-pvc
          persistentVolumeClaim:
            claimName: algo-mainnet-kmd-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: algo-mainnet-kmd-pvc
  namespace: algo-kmd-mainnet
spec:
  storageClassName: algo-mainnet-kmd-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
kind: PersistentVolume
metadata:
  name: algo-mainnet-kmd-pv
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: algo-mainnet-kmd-pv
  local:
    path: /run/desktop/mnt/host/c/algo
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - docker-desktop