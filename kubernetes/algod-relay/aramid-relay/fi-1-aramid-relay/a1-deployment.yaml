apiVersion: v1
kind: Namespace
metadata:
  name: aramid-relay-mainnet
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aramidmain-algod-3-ingress
  namespace: aramid-relay-mainnet
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/backend-protocol: 'HTTP'
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "server: hide";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      proxy_set_header X-Algo-API-Token aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
spec:
  tls:
    - hosts:
        - algod.aramidmain.a-wallet.net
      secretName: tls-aramidmain-algod-3
  rules:
    - host: algod.aramidmain.a-wallet.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: aramid-set-service-data-a1
                port:
                  number: 18280
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aramid-archival-mainnet-a1
  namespace: aramid-relay-mainnet
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: aramid-archival-mainnet-a1
  template:
    metadata:
      labels:
        app: aramid-archival-mainnet-a1
        lb: aramid-archival-mainnet
    spec:
      nodeName: s3-k1-fi.a-wallet.net
      terminationGracePeriodSeconds: 3
      containers:
        - name: aramid-archival-mainnet-a1
          image: scholtz2/aramid-algo-node:v4.1.1-stable
          imagePullPolicy: Always
          resources:
            requests:
              memory: '1000Mi'
              cpu: '1000m'
            limits:
              memory: '20000Mi'
              cpu: '32000m'
          #command: ['/bin/sh', '-ec', "while :; do echo '.'; sleep 5 ; done"]
          #command:
          #  - /bin/bash
          #  - /app/run.sh

          startupProbe:
            exec:
              command:
                - /bin/bash
                - /app/health.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 1000
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - /app/health.sh
            initialDelaySeconds: 10
            timeoutSeconds: 10
            failureThreshold: 100
          livenessProbe:
            tcpSocket:
              port: 18280
            initialDelaySeconds: 15
            periodSeconds: 20
          ports:
            - containerPort: 14260
              protocol: TCP
            - containerPort: 18280
              protocol: TCP
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: aramid-main-vol-root-a1
              mountPath: /app/data
            - name: aramid-main-vol-net-a1
              mountPath: /app/data/aramidmain-v1.0
            - name: aramid-main-vol-coldstorage-a1
              mountPath: /app/coldstorage
      volumes:
        - name: aramid-main-vol-root-a1
          persistentVolumeClaim:
            claimName: aramid-main-vol-root-a1
        - name: aramid-main-vol-net-a1
          persistentVolumeClaim:
            claimName: aramid-main-vol-net-a1
        - name: aramid-main-vol-coldstorage-a1
          persistentVolumeClaim:
            claimName: aramid-main-vol-coldstorage-a1

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aramid-main-vol-root-a1
  namespace: aramid-relay-mainnet
spec:
  storageClassName: aramid-main-root-a1
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aramid-main-vol-net-a1
  namespace: aramid-relay-mainnet
spec:
  storageClassName: aramid-main-net-a1
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aramid-main-vol-coldstorage-a1
  namespace: aramid-relay-mainnet
spec:
  storageClassName: aramid-main-coldstorage-a1
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: aramid-main-root-a1
spec:
  storageClassName: aramid-main-root-a1
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: '/mnt/k8s/aramid/archival/root'

  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - s3-k1-fi.a-wallet.net
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: aramid-main-net-a1
spec:
  storageClassName: aramid-main-net-a1
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: '/mnt/k8s/aramid/archival/net'

  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - s3-k1-fi.a-wallet.net
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: aramid-main-coldstorage-a1
spec:
  storageClassName: aramid-main-coldstorage-a1
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: '/mnt/k8s/aramid/archival/coldstorage'

  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - s3-k1-fi.a-wallet.net
