
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.prefix }}{{ .Values.deploymentConduit.name }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{ .Values.deploymentConduit.label.key }}: {{ .Values.prefix }}{{ .Values.deploymentConduit.label.value }}
  template:
    metadata:
      labels:
        {{ .Values.deploymentConduit.label.key }}: {{ .Values.prefix }}{{ .Values.deploymentConduit.label.value }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 3
      initContainers:
        - name: wait-for-db-before-starup
          image: busybox
          command:
            [
              'sh',
              '-c',
              'echo -e "Checking for the availability of Follower Node deployment at {{ .Values.prefix }}{{ .Values.serviceFollowerNode.name }}"; while ! nc -z {{ .Values.prefix }}{{ .Values.serviceFollowerNode.name }} 8080; do sleep 1; printf "-"; done; echo -e "  >> Follower node has started";',
            ]
      containers:
        - name: {{ .Values.prefix }}conduit
          image: {{ .Values.deploymentConduit.image }}:{{ .Values.deploymentConduit.tag }}
          imagePullPolicy: {{ .Values.deploymentConduit.imagePullPolicy }}
          resources:
            requests:
              memory: {{ .Values.deploymentConduit.resources.requests.memory }}
              cpu:  {{ .Values.deploymentConduit.resources.requests.cpu }}
            limits:
              memory: {{ .Values.deploymentConduit.resources.limits.memory }}
              cpu: {{ .Values.deploymentConduit.resources.limits.cpu }}
          # command:
          #   [
          #     "/bin/bash",
          #     "-ec",
          #     "date; sleep 10; date; conduit; sleep 100 ; date; ",
          #   ]
          #while ! timeout 1 bash -c "echo > /dev/tcp/localhost/8080";  do sleep 1 && echo -n .; done
          # command: ['/bin/bash', '-ec', 'while :; do date; sleep 60 ; done']
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: {{ .Values.prefix }}{{ .Values.secretConduit.name }}
              mountPath: /app/data/conduit.yml
              subPath: conduit.yml
            - name: {{ .Values.prefix }}aramid-conduit-pvc
              mountPath: /app/data

      volumes:
        - name: {{ .Values.prefix }}{{ .Values.secretConduit.name }}
          secret:
            secretName: {{ .Values.prefix }}{{ .Values.secretConduit.name }}
        - name: {{ .Values.prefix }}aramid-conduit-pvc
          persistentVolumeClaim:
            claimName: {{ .Values.prefix }}aramid-conduit-pvc
